{"version":3,"sources":["webpack:///./src/components/theme.js","webpack:///./src/components/SEO.js","webpack:///./node_modules/@material-ui/core/esm/utils/capitalize.js","webpack:///./node_modules/@material-ui/core/esm/Typography/Typography.js","webpack:///./src/pages/404.js"],"names":["theme","createMuiTheme","palette","common","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","error","text","disabled","hint","site","itemScope","itemType","lang","language","itemProp","name","content","author","description","rel","href","siteUrl","title","property","siteLogo","capitalize","string","charAt","toUpperCase","slice","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","Typography","props","ref","_props$align","align","classes","className","_props$color","color","component","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variant","variant","_props$variantMapping","variantMapping","other","Component","root","concat","margin","typography","caption","button","overline","srOnly","position","height","width","overflow","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","colorSecondary","colorTextPrimary","colorTextSecondary","colorError","displayInline","displayBlock"],"mappings":"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","file":"component---src-pages-404-js-ad6d117084e70d1f9d72.js","sourcesContent":["import {createMuiTheme} from \"@material-ui/core/styles\"\n\nconst theme = createMuiTheme({\n  palette: {\n    common: {\n      black: \"#000\",\n      white: \"#fff\",\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fafafa\",\n    },\n    primary: {\n      light: \"#5cbdfc\",\n      main: \"#008dc9\",\n      dark: \"#006098\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#ff5e62\",\n      main: \"#d82138\",\n      dark: \"#9f0012\",\n      contrastText: \"#fff\",\n    },\n    error: {\n      main: \"#f44336\",\n    },\n    text: {\n      primary: \"#000\",\n      secondary: \"rgba(0, 0, 0, 0.68)\",\n      disabled: \"rgba(0, 0, 0, 0.38)\",\n      hint: \"rgba(0, 0, 0, 0.38)\",\n    },\n  },\n})\n\nexport default theme\n","import React from \"react\"\nimport {Helmet} from \"react-helmet\"\nimport {useStaticQuery, graphql} from \"gatsby\"\n\nconst useSiteMetadata = () => {\n  const {site} = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            author\n            dataSource\n            description\n            siteSource\n            title\n            siteUrl\n            language\n          }\n        }\n      }\n    `,\n  )\n  return site.siteMetadata\n}\n\nconst Metadata = () => {\n  const site = useSiteMetadata()\n\n  return (\n    <Helmet>\n      <html\n        itemScope\n        itemType=\"http://schema.org/WebPage\"\n        lang={site.language}\n      />\n\n      <title itemProp=\"name\">{site.title}</title>\n\n      <meta name=\"author\" content={site.author} />\n      <meta name=\"description\" content={site.description} />\n      <link rel=\"canonical\" href={site.siteUrl} />\n\n      <link rel=\"preconnect\" href=\"https://www.google-analytics.com\" />\n\n      <meta itemProp=\"name\" content={site.title} />\n      <meta itemProp=\"author\" content={site.author} />\n      <meta itemProp=\"description\" content={site.description} />\n\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:title\" content={site.title} />\n      <meta property=\"og:description\" content={site.description} />\n      <meta property=\"og:site_name\" content={site.title} />\n      <meta property=\"og:url\" content={site.siteUrl} />\n      <meta property=\"og:image\" content={site.siteUrl + site.siteLogo} />\n      <meta property=\"og:language\" content={site.language} />\n    </Helmet>\n  )\n}\nexport default Metadata\n","// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.\n//\n// A strict capitalization should uppercase the first letter of each word a the sentence.\n// We only handle the first word.\nexport default function capitalize(string) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof string !== 'string') {\n      throw new Error('Material-UI: capitalize(string) expects a string argument.');\n    }\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different DOM element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","import React from \"react\"\nimport {ThemeProvider} from \"@material-ui/core/styles\"\nimport {Typography} from \"@material-ui/core\"\nimport theme from \"../components/theme\"\nimport SEO from \"../components/SEO\"\n\nconst NotFoundPage = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <SEO />\n      <Typography variant=\"h6\" color=\"primary\" align=\"center\">\n        Opps, seems like you are lost!\n      </Typography>\n    </ThemeProvider>\n  )\n}\n\nexport default NotFoundPage\n"],"sourceRoot":""}